{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nexport default {\n  name: 'Chart',\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'bar',\n      // 'bar', 'pie', 'line'\n      validator: value => ['bar', 'pie', 'line'].includes(value)\n    },\n    data: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    width: {\n      type: Number,\n      default: 400\n    },\n    height: {\n      type: Number,\n      default: 300\n    },\n    size: {\n      type: Number,\n      default: 200\n    }\n  },\n  mounted() {\n    this.renderChart();\n  },\n  watch: {\n    data: {\n      handler() {\n        this.renderChart();\n      },\n      deep: true\n    }\n  },\n  methods: {\n    renderChart() {\n      const canvas = this.$refs.chartCanvas;\n      const ctx = canvas.getContext('2d');\n\n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      if (!this.data || this.data.length === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      if (this.type === 'bar') {\n        this.drawBarChart(ctx, canvas);\n      } else if (this.type === 'pie') {\n        this.drawPieChart(ctx, canvas);\n      }\n    },\n    drawNoDataMessage(ctx, canvas) {\n      ctx.fillStyle = '#6b7280';\n      ctx.font = '16px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('暂无数据', canvas.width / 2, canvas.height / 2);\n    },\n    drawBarChart(ctx, canvas) {\n      const padding = 60;\n      const chartWidth = canvas.width - padding * 2;\n      const chartHeight = canvas.height - padding * 2;\n\n      // 获取最大值用于缩放\n      const maxValue = Math.max(...this.data.map(d => d.value));\n      if (maxValue === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      const barWidth = chartWidth / this.data.length * 0.8;\n      const barSpacing = chartWidth / this.data.length * 0.2;\n\n      // 绘制坐标轴\n      ctx.strokeStyle = '#e5e7eb';\n      ctx.lineWidth = 1;\n\n      // Y轴\n      ctx.beginPath();\n      ctx.moveTo(padding, padding);\n      ctx.lineTo(padding, padding + chartHeight);\n      ctx.stroke();\n\n      // X轴\n      ctx.beginPath();\n      ctx.moveTo(padding, padding + chartHeight);\n      ctx.lineTo(padding + chartWidth, padding + chartHeight);\n      ctx.stroke();\n\n      // 绘制柱状图\n      this.data.forEach((item, index) => {\n        const barHeight = item.value / maxValue * chartHeight;\n        const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;\n        const y = padding + chartHeight - barHeight;\n\n        // 绘制柱子\n        const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);\n        gradient.addColorStop(0, '#3b82f6');\n        gradient.addColorStop(1, '#1e40af');\n        ctx.fillStyle = gradient;\n        ctx.fillRect(x, y, barWidth, barHeight);\n\n        // 绘制边框\n        ctx.strokeStyle = '#1e40af';\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, barWidth, barHeight);\n\n        // 绘制数值标签\n        ctx.fillStyle = '#374151';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(item.value.toString(), x + barWidth / 2, y - 5);\n\n        // 绘制标签（旋转）\n        ctx.save();\n        ctx.translate(x + barWidth / 2, padding + chartHeight + 15);\n        ctx.rotate(-Math.PI / 4);\n        ctx.fillStyle = '#6b7280';\n        ctx.font = '11px Arial';\n        ctx.textAlign = 'right';\n        ctx.fillText(item.label, 0, 0);\n        ctx.restore();\n      });\n\n      // 绘制Y轴刻度 - 改进算法\n      this.drawYAxisTicks(ctx, padding, chartWidth, chartHeight, maxValue);\n    },\n    drawPieChart(ctx, canvas) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 40;\n      const total = this.data.reduce((sum, d) => sum + d.value, 0);\n      if (total === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      let currentAngle = -Math.PI / 2; // 从顶部开始\n\n      // 颜色数组\n      const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'];\n      this.data.forEach((item, index) => {\n        const sliceAngle = item.value / total * 2 * Math.PI;\n\n        // 绘制扇形\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n        ctx.closePath();\n        ctx.fillStyle = colors[index % colors.length];\n        ctx.fill();\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // 绘制标签\n        const labelAngle = currentAngle + sliceAngle / 2;\n        const labelX = centerX + Math.cos(labelAngle) * (radius + 25);\n        const labelY = centerY + Math.sin(labelAngle) * (radius + 25);\n        ctx.fillStyle = '#374151';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${item.label}`, labelX, labelY);\n        ctx.fillText(`${item.value}`, labelX, labelY + 15);\n        currentAngle += sliceAngle;\n      });\n    },\n    drawYAxisTicks(ctx, padding, chartWidth, chartHeight, maxValue) {\n      // Implementation of drawYAxisTicks method\n    }\n  }\n};","map":{"version":3,"names":["name","props","title","type","String","default","validator","value","includes","data","Array","required","width","Number","height","size","mounted","renderChart","watch","handler","deep","methods","canvas","$refs","chartCanvas","ctx","getContext","clearRect","length","drawNoDataMessage","drawBarChart","drawPieChart","fillStyle","font","textAlign","fillText","padding","chartWidth","chartHeight","maxValue","Math","max","map","d","barWidth","barSpacing","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","forEach","item","index","barHeight","x","y","gradient","createLinearGradient","addColorStop","fillRect","strokeRect","toString","save","translate","rotate","PI","label","restore","drawYAxisTicks","centerX","centerY","radius","min","total","reduce","sum","currentAngle","colors","sliceAngle","arc","closePath","fill","labelAngle","labelX","cos","labelY","sin"],"sources":["src/components/Chart.vue"],"sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <h4 v-if=\"title\" class=\"chart-title\">{{ title }}</h4>\n    <canvas ref=\"chartCanvas\" :width=\"width\" :height=\"height\"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chart',\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    type: {\n      type: String,\n      default: 'bar', // 'bar', 'pie', 'line'\n      validator: value => ['bar', 'pie', 'line'].includes(value)\n    },\n    data: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    width: {\n      type: Number,\n      default: 400\n    },\n    height: {\n      type: Number,\n      default: 300\n    },\n    size: {\n      type: Number,\n      default: 200\n    }\n  },\n  mounted() {\n    this.renderChart();\n  },\n  watch: {\n    data: {\n      handler() {\n        this.renderChart();\n      },\n      deep: true\n    }\n  },\n  methods: {\n    renderChart() {\n      const canvas = this.$refs.chartCanvas;\n      const ctx = canvas.getContext('2d');\n      \n      // 清空画布\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      if (!this.data || this.data.length === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      \n      if (this.type === 'bar') {\n        this.drawBarChart(ctx, canvas);\n      } else if (this.type === 'pie') {\n        this.drawPieChart(ctx, canvas);\n      }\n    },\n    \n    drawNoDataMessage(ctx, canvas) {\n      ctx.fillStyle = '#6b7280';\n      ctx.font = '16px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('暂无数据', canvas.width / 2, canvas.height / 2);\n    },\n    \n    drawBarChart(ctx, canvas) {\n      const padding = 60;\n      const chartWidth = canvas.width - padding * 2;\n      const chartHeight = canvas.height - padding * 2;\n      \n      // 获取最大值用于缩放\n      const maxValue = Math.max(...this.data.map(d => d.value));\n      if (maxValue === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      \n      const barWidth = chartWidth / this.data.length * 0.8;\n      const barSpacing = chartWidth / this.data.length * 0.2;\n      \n      // 绘制坐标轴\n      ctx.strokeStyle = '#e5e7eb';\n      ctx.lineWidth = 1;\n      \n      // Y轴\n      ctx.beginPath();\n      ctx.moveTo(padding, padding);\n      ctx.lineTo(padding, padding + chartHeight);\n      ctx.stroke();\n      \n      // X轴\n      ctx.beginPath();\n      ctx.moveTo(padding, padding + chartHeight);\n      ctx.lineTo(padding + chartWidth, padding + chartHeight);\n      ctx.stroke();\n      \n      // 绘制柱状图\n      this.data.forEach((item, index) => {\n        const barHeight = (item.value / maxValue) * chartHeight;\n        const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;\n        const y = padding + chartHeight - barHeight;\n        \n        // 绘制柱子\n        const gradient = ctx.createLinearGradient(0, y, 0, y + barHeight);\n        gradient.addColorStop(0, '#3b82f6');\n        gradient.addColorStop(1, '#1e40af');\n        \n        ctx.fillStyle = gradient;\n        ctx.fillRect(x, y, barWidth, barHeight);\n        \n        // 绘制边框\n        ctx.strokeStyle = '#1e40af';\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, barWidth, barHeight);\n        \n        // 绘制数值标签\n        ctx.fillStyle = '#374151';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(item.value.toString(), x + barWidth / 2, y - 5);\n        \n        // 绘制标签（旋转）\n        ctx.save();\n        ctx.translate(x + barWidth / 2, padding + chartHeight + 15);\n        ctx.rotate(-Math.PI / 4);\n        ctx.fillStyle = '#6b7280';\n        ctx.font = '11px Arial';\n        ctx.textAlign = 'right';\n        ctx.fillText(item.label, 0, 0);\n        ctx.restore();\n      });\n      \n      // 绘制Y轴刻度 - 改进算法\n      this.drawYAxisTicks(ctx, padding, chartWidth, chartHeight, maxValue);\n    },\n    \n    drawPieChart(ctx, canvas) {\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) - 40;\n      \n      const total = this.data.reduce((sum, d) => sum + d.value, 0);\n      if (total === 0) {\n        this.drawNoDataMessage(ctx, canvas);\n        return;\n      }\n      \n      let currentAngle = -Math.PI / 2; // 从顶部开始\n      \n      // 颜色数组\n      const colors = [\n        '#3b82f6', '#ef4444', '#10b981', '#f59e0b', \n        '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'\n      ];\n      \n      this.data.forEach((item, index) => {\n        const sliceAngle = (item.value / total) * 2 * Math.PI;\n        \n        // 绘制扇形\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);\n        ctx.closePath();\n        \n        ctx.fillStyle = colors[index % colors.length];\n        ctx.fill();\n        \n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // 绘制标签\n        const labelAngle = currentAngle + sliceAngle / 2;\n        const labelX = centerX + Math.cos(labelAngle) * (radius + 25);\n        const labelY = centerY + Math.sin(labelAngle) * (radius + 25);\n        \n        ctx.fillStyle = '#374151';\n        ctx.font = '12px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(`${item.label}`, labelX, labelY);\n        ctx.fillText(`${item.value}`, labelX, labelY + 15);\n        \n        currentAngle += sliceAngle;\n      });\n    },\n    \n    drawYAxisTicks(ctx, padding, chartWidth, chartHeight, maxValue) {\n      // Implementation of drawYAxisTicks method\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chart-container {\n  background: white;\n  border-radius: 8px;\n  padding: 1rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.chart-title {\n  text-align: center;\n  margin: 0 0 1rem 0;\n  color: #374151;\n  font-size: 1rem;\n  font-weight: 600;\n}\n\ncanvas {\n  display: block;\n  margin: 0 auto;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}